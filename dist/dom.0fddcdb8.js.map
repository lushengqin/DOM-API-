{"version":3,"sources":["dom.js"],"names":["window","dom","create","tagName","document","createElement","createLabel","string","container","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","x","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","console","log","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.0fddcdb8.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    create(tagName){ //封装获取ID \r\n        return document.createElement(tagName)\r\n    },\r\n    createLabel(string){ //封装直接获取多个标签\r\n        // const container = document.createElement('div') //这里我尝试放div 但是引用之后得到的结果是undefined   \r\n        const container = document.createElement('template')\r\n        container.innerHTML = string.trim()//trim()去掉标签前面的空格\r\n        // return container.children[0] // template不能用children来获取它的孩子\r\n        return container.content.firstChild\r\n    },\r\n    after(node,node2){\r\n        node.parentNode.insertBefore(node2,node.nextSibling)  //找到它最后一个孩子 然后添加到最后一个元素的后面\r\n    },\r\n    before(node,node2){\r\n        node.parentNode.insertBefore(node2,node)  \r\n    },\r\n    append(parent,node){\r\n        parent.appendChild(node)\r\n    },\r\n    wrap(node,parent){ //给它的外面加一层爸爸\r\n        dom.before(node,parent)  //先添加一个父元素\r\n        dom.append(parent,node)  //再把原来的子元素加到新的父元素里面\r\n    },\r\n    remove(node){\r\n        node.parentNode.removeChild(node)\r\n        return node  //让外面能引用\r\n    },\r\n    empty(node){\r\n        const array=[]\r\n        let x = node.firstChild\r\n        while(x){\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild   \r\n        }\r\n        return array\r\n    },\r\n    attr(node,name,value){\r\n        if(arguments.length===3){\r\n            node.setAttribute(name,value)\r\n        }else if(arguments.length ===2){\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    text(node,string){\r\n        if(arguments.length ===2){ //长度为2 设置新的内容\r\n            console.log(1)\r\n            if('innerText' in node){\r\n                node.innerText = string\r\n            }else{\r\n                node.textContent = string\r\n            }\r\n        }else if(arguments.length === 1){ //长度为1 获取原内容\r\n            if('innerText' in node){\r\n                return node.innerText \r\n            }else{\r\n                return node.textContent\r\n            }\r\n        }\r\n    },\r\n    html(node,string){\r\n        if(arguments.length === 2){\r\n            console.log(222)\r\n            node.innerHTML = string\r\n        }else if(arguments.length ===1){\r\n            console.log(111)\r\n           return  node.innerHTML\r\n        }\r\n    },\r\n    style(node,name,value){\r\n        if(arguments.length ===3){  \r\n            //如果给他传三个值 那么就是设置\r\n            // dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        }else if(arguments.length ===2){  //如果给他传两个值 字符串和对象不同\r\n            if(typeof name === 'string'){  \r\n                //它的值是字符串型 那么就是获取\r\n                // dom.style(div,'color') 获取它的color\r\n                return node.style[name]\r\n            }else if(name instanceof Object){ //如果它的值是对象 那么它也是设置\r\n                const object = name\r\n                for(let key in object){\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class:{\r\n        add(node,className){  //添加\r\n            node.classList.add(className) \r\n        },\r\n        remove(node,className){ //删除\r\n            console.log(222)\r\n            node.classList.remove(className)\r\n        },\r\n        has(node,className){ //检查是否包含某属性 得到布尔值 true 或 false\r\n            return node.classList.contains(className)\r\n        }\r\n\r\n    },\r\n    on(node,eventName,fn){\r\n        node.addEventListener(eventName,fn)\r\n    },\r\n    off(node,eventName,fn){\r\n        node.removeEventListener(eventName,fn)\r\n    },\r\n    find(selector,scope){\r\n        return(scope || document).querySelectorAll(selector)\r\n    },\r\n    parent(node){\r\n        return node.parentNode\r\n    },\r\n    children(node){\r\n        return node.children  \r\n    },\r\n    siblings(node){\r\n        return Array.from(node.parentNode.children).filter(n => n!==node)\r\n    },\r\n    next(node){\r\n        let x = node.nextSibling\r\n        while(x && x.nodeType === 3){\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    previous(node){\r\n        let x = node.previousSibling\r\n        while(x && x.nodeType === 3){\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    each(nodeList,fn){\r\n        for(let i =0 ;i<nodeList.length;i++){\r\n            fn.call(null,nodeList[i])\r\n        }\r\n    },\r\n    index(node){\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for(i=0;i<list.length;i++){\r\n            if(list[i]===node){\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n\r\n\r\n}"]}